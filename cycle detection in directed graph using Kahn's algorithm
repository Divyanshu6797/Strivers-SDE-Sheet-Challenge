class Solution {
     /*  using path visit
    private :
    bool dfs(int i,vector<int> &vis, vector<int> &pathvis,vector<int> adj[])
    {
        vis[i]=1;
        pathvis[i]=1;
        
        for(auto it:adj[i])
        {
            if(!vis[it])
            {
                if(dfs(it,vis,pathvis,adj)==true)
                return true;
                
                
            }
            else if(vis[it])
            {
                if(pathvis[it])
                return true;
            }
        }
        pathvis[i]=0;
        return false;
        
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        vector<int> pathvis(V,0);
        
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            if(dfs(i,vis,pathvis,adj))
            return true;
        }
        return false;
    }
    */
    
    //using topological sorting Kahn's algorithm
    public :
    bool isCyclic(int V, vector<int> adj[]) {
        
        queue<int> q;
        int indegree[V]={0};
        
        for(int i=0;i<V;i++)
        {
            for(auto it: adj[i])
            {
                indegree[it]++;
            }
        }
        
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        int count=0;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            count++;
            
            for(auto it:adj[node])
            {
                indegree[it]--;
                if(indegree[it]==0)
                {
                    q.push(it);
                }
            }
            
        }
        if(count!=V)
        {
            return true;
        }
        else return false;
       
    }
    
};
